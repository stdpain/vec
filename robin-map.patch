diff --git a/include/tsl/robin_hash.h b/include/tsl/robin_hash.h
index 89c7c96..42ba282 100644
--- a/include/tsl/robin_hash.h
+++ b/include/tsl/robin_hash.h
@@ -278,6 +278,24 @@ class bucket_entry : public bucket_entry_hash<StoreHash> {
 
   void set_as_last_bucket() noexcept { m_last_bucket = true; }
 
+  template <typename F>
+  void set_value_of_empty_bucket_lz(distance_type dist_from_ideal_bucket,
+                                 truncated_hash_type hash, 
+                                 const typename value_type::first_type& key, F&& f) {
+    tsl_rh_assert(dist_from_ideal_bucket >= 0);
+    tsl_rh_assert(empty());
+
+    f([this](auto&&key, auto&& value) {
+      ::new (static_cast<void*>(std::addressof(m_value)))
+        value_type(key, value);
+    });
+    this->set_hash(hash);
+    m_dist_from_ideal_bucket = dist_from_ideal_bucket;
+
+    tsl_rh_assert(!empty());
+  }
+
+
   template <typename... Args>
   void set_value_of_empty_bucket(distance_type dist_from_ideal_bucket,
                                  truncated_hash_type hash,
@@ -821,6 +839,21 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
     return try_emplace(std::forward<K>(key), std::forward<Args>(args)...).first;
   }
 
+  template <class K, class F>
+  iterator lazy_emplace(const K& key, F&& f) {
+    return insert_impl_lz(key, [this](const K& key) { return hash_key(key);} ,key, std::forward<F>(f)).first;
+  }
+
+  template <class K, class F>
+  iterator lazy_emplace_with_hash(const K& key, size_t hashval, F&& f) {
+    return insert_impl_lz(key, [hashval](const K& key) { return hashval;} ,key, std::forward<F>(f)).first;
+  }
+
+  void prefetch_hash(size_t hash) {
+    std::size_t ibucket = bucket_for_hash(hash);
+    __builtin_prefetch(static_cast<const void*>(m_buckets + ibucket));
+  }
+
   /**
    * Here to avoid `template<class K> size_type erase(const K& key)` being used
    * when we use an `iterator` instead of a `const_iterator`.
@@ -1263,6 +1296,55 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
     return std::make_pair(iterator(m_buckets + ibucket), true);
   }
 
+  template <class K, class HashProvider, class... Args>
+  std::pair<iterator, bool> insert_impl_lz(const K& key, HashProvider&& hash_provider,
+                                        Args&&... value_type_args) {
+    const std::size_t hash = hash_provider(key);
+
+    std::size_t ibucket = bucket_for_hash(hash);
+    distance_type dist_from_ideal_bucket = 0;
+
+    while (dist_from_ideal_bucket <=
+           m_buckets[ibucket].dist_from_ideal_bucket()) {
+      if ((!USE_STORED_HASH_ON_LOOKUP ||
+           m_buckets[ibucket].bucket_hash_equal(hash)) &&
+          compare_keys(KeySelect()(m_buckets[ibucket].value()), key)) {
+        return std::make_pair(iterator(m_buckets + ibucket), false);
+      }
+
+      ibucket = next_bucket(ibucket);
+      dist_from_ideal_bucket++;
+    }
+
+    if (rehash_on_extreme_load()) {
+      ibucket = bucket_for_hash(hash);
+      dist_from_ideal_bucket = 0;
+
+      while (dist_from_ideal_bucket <=
+             m_buckets[ibucket].dist_from_ideal_bucket()) {
+        ibucket = next_bucket(ibucket);
+        dist_from_ideal_bucket++;
+      }
+    }
+
+    if (m_buckets[ibucket].empty()) {
+      m_buckets[ibucket].set_value_of_empty_bucket_lz(
+          dist_from_ideal_bucket, bucket_entry::truncate_hash(hash),
+          std::forward<Args>(value_type_args)...);
+    } else {
+      insert_value(ibucket, dist_from_ideal_bucket,
+                   bucket_entry::truncate_hash(hash),
+                   std::forward<Args>(value_type_args)...);
+    }
+
+    m_nb_elements++;
+    /*
+     * The value will be inserted in ibucket in any case, either because it was
+     * empty or by stealing the bucket (robin hood).
+     */
+    return std::make_pair(iterator(m_buckets + ibucket), true);
+  }
+
   template <class... Args>
   void insert_value(std::size_t ibucket, distance_type dist_from_ideal_bucket,
                     truncated_hash_type hash, Args&&... value_type_args) {
@@ -1270,6 +1352,17 @@ class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {
     insert_value_impl(ibucket, dist_from_ideal_bucket, hash, value);
   }
 
+  template <class F>
+  void insert_value(std::size_t ibucket, distance_type dist_from_ideal_bucket,
+                    truncated_hash_type hash, const key_type& key, F&& f) {
+    char buffer[sizeof(value_type)];
+    f([&buffer](auto&&key, auto&& value) {
+      ::new (static_cast<void*>(buffer))
+        value_type(key, value);
+    });
+    insert_value_impl(ibucket, dist_from_ideal_bucket, hash, *reinterpret_cast<value_type*>(buffer));
+  }
+
   void insert_value(std::size_t ibucket, distance_type dist_from_ideal_bucket,
                     truncated_hash_type hash, value_type&& value) {
     insert_value_impl(ibucket, dist_from_ideal_bucket, hash, value);
diff --git a/include/tsl/robin_map.h b/include/tsl/robin_map.h
index aeb354c..e134ee3 100644
--- a/include/tsl/robin_map.h
+++ b/include/tsl/robin_map.h
@@ -332,6 +332,24 @@ class robin_map {
                                  std::forward<Args>(args)...);
   }
 
+  template <class F>
+  iterator lazy_emplace(const key_type& k, F&& f) {
+    return m_ht.lazy_emplace(k, std::move(f)).first;
+  }
+
+  template <class F>
+  iterator lazy_emplace_with_hash(const key_type& k, size_t hashval, F&& f) {
+    return m_ht.lazy_emplace_with_hash(k, hashval, std::move(f)).first;
+  }
+
+  void prefetch_hash(size_t hash) {
+    m_ht.prefetch_hash(hash);
+  }
+
+  void prefetch(const key_type& k) {
+    m_ht.prefetch_hash(Hash()(k));
+  }
+
   iterator erase(iterator pos) { return m_ht.erase(pos); }
   iterator erase(const_iterator pos) { return m_ht.erase(pos); }
   iterator erase(const_iterator first, const_iterator last) {
